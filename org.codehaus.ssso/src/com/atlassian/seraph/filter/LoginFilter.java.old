package com.atlassian.seraph.filter;

import org.apache.log4j.Category;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;
import java.util.Iterator;

import com.atlassian.seraph.config.SecurityConfig;
import com.atlassian.seraph.auth.AuthenticatorException;
import com.atlassian.seraph.auth.Authenticator;
import com.atlassian.seraph.interceptor.LoginInterceptor;

/**
 * This is a filter that logs the user in. It works a little like J2EE form-based seraph, except it looks for the
 * parameters 'os_username' and 'os_password' instead of j_username and j_password.
 * <p>
 * The form post/get action should be the URL of the login servlet/JSP/action - given by SecurityFilter.LOGIN_URL.
 * <p>
 * If the parameters exist and authentication is successful, the user will be redirected by the filter to the URL given
 * by the session attribute at SecurityFilter.ORIGINAL_URL_KEY.
 * <p>
 * If this URL doesn't exist, it will look for a parameter 'os_destination' to use as the redirected URL instead.
 * <p>
 * If neither is found, it is assumed that the page will check the authorisation status and handle redirection itself.
 * <p>
 * From the any other filter in the request, or the servlet/JSP/action which processes the request, you can look up the
 * status of the authorisation attempt. The status is a String request attribute, with the key 'os_authstatus'.
 * <p>
 * The possible statuses are:
 * <ul>
 *  <li> LoginFilter.LOGIN_SUCCESS - the login was processed, and user was logged in
 *  <li> LoginFilter.LOGIN_FAILURE - the login was processed, the user gave a bad username or password
 *  <li> LoginFilter.LOGIN_ERROR - the login was processed, an exception occurred trying to log the user in
 *  <li> LoginFilter.LOGIN_NOATTEMPT - the login was no processed, no form parameters existed
 * </ul>
 */
public class LoginFilter implements Filter
{
    private FilterConfig config = null;

    private static final Category log = Category.getInstance(LoginFilter.class);
    public static final String ALREADY_FILTERED = "loginfilter.already.filtered";

    public static final String LOGIN_SUCCESS = "success";
    public static final String LOGIN_FAILED = "failed";
    public static final String LOGIN_ERROR = "error";
    public static final String LOGIN_NOATTEMPT = null;
    public static final String OS_AUTHSTATUS_KEY = "os_authstatus";
    private SecurityConfig securityConfig = null;

    public void init(FilterConfig config)
    {
        // log.debug("LoginFilter.init");
        this.config = config;
    }

    public void destroy()
    {
        // log.debug("LoginFilter.destroy");
        config = null;
    }

    /** @deprecated Not needed in latest version of Servlet 2.3 API */
    // NOTE: Filter doesn't work with Orion 1.5.2 without this method
    public FilterConfig getFilterConfig()
    {
        return config;
    }

    /** @deprecated Not needed in latest version of Servlet 2.3 API - replaced by init(). */
    // NOTE: Filter doesn't work with Orion 1.5.2 without this method
    public void setFilterConfig(FilterConfig filterConfig)
    {
        if (filterConfig != null) //it seems that Orion 1.5.2 calls this with a null config.
            init(filterConfig);
    }


    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)
            throws IOException, ServletException
    {
        // wrap the request with one that returns the User as the Principal
        req = new SecurityHttpRequestWrapper((HttpServletRequest) req);

        if (req.getAttribute(ALREADY_FILTERED) != null || !getSecurityConfig().getController().isSecurityEnabled())
        {
            chain.doFilter(req, res);
            return;
        }
        else
        {
            req.setAttribute(ALREADY_FILTERED, Boolean.TRUE);
        }

        req.setAttribute(OS_AUTHSTATUS_KEY, LOGIN_NOATTEMPT);

        HttpServletRequest request = (HttpServletRequest) req;
        HttpServletResponse response = (HttpServletResponse) res;

        // check for parameters
        String username = request.getParameter("os_username");
        String password = request.getParameter("os_password");
        boolean persistentLogin = "true".equals(request.getParameter("os_cookie"));

        boolean loggedIn = false;

        // try to login the user if possible
        if (username != null && password != null)
        {
            List interceptors = getSecurityConfig().getInterceptors(LoginInterceptor.class);

            log.debug("Username and Password are not null - processing login request");
            try
            {
                for (Iterator iterator = interceptors.iterator(); iterator.hasNext();)
                {
                    LoginInterceptor loginInterceptor = (LoginInterceptor) iterator.next();
                    loginInterceptor.beforeLogin(request, response, username, password, persistentLogin);
                }

                loggedIn = getAuthenticator().login(request, response, username, password, persistentLogin);

                if (loggedIn)
                {
                    log.debug("Login was successful - setting attribute to \"Success\"");
                    request.setAttribute(OS_AUTHSTATUS_KEY, LOGIN_SUCCESS);
                }
                else
                {
                    log.debug("Login was not successful - setting attribute to \"Failed\"");
                    request.setAttribute(OS_AUTHSTATUS_KEY, LOGIN_FAILED);
                }
            }
            catch (AuthenticatorException e)
            {
                log.debug("Login was not successful, and exception was thrown - setting attribute to \"Error\"");
                request.setAttribute(OS_AUTHSTATUS_KEY, LOGIN_ERROR);
                e.printStackTrace();
                log.warn("Exception was thrown whilst logging in: " + e.getMessage(), e);
            }

            for (Iterator iterator = interceptors.iterator(); iterator.hasNext();)
            {
                LoginInterceptor loginInterceptor = (LoginInterceptor) iterator.next();
                loginInterceptor.afterLogin(request, response, username, password, persistentLogin, (String) request.getAttribute(OS_AUTHSTATUS_KEY));
            }
        }

        // if we successfully logged in - look for an original URL to forward to
        if (loggedIn)
        {
            String originalURL = (String) request.getSession().getAttribute(getSecurityConfig().getOriginalURLKey());

            if (originalURL != null)
            {
                if (log.isDebugEnabled())
                    log.debug("Logged In - Redirecting to Original URL: " + request.getContextPath() + originalURL);

                request.getSession().setAttribute(getSecurityConfig().getOriginalURLKey(), null);
                ((HttpServletResponse) res).sendRedirect(request.getContextPath() + originalURL);
                return;
            }
            else if (request.getParameter("os_destination") != null)
            {
                if (log.isDebugEnabled())
                    log.debug("Logged In - redirecting to os_destination: " + request.getContextPath() + request.getParameter("os_destination"));

                ((HttpServletResponse) res).sendRedirect(request.getContextPath() + request.getParameter("os_destination"));
                return;
            }
        }

        chain.doFilter(req, res);
    }

    protected Authenticator getAuthenticator() {
        return getSecurityConfig().getAuthenticator();
    }

    protected SecurityConfig getSecurityConfig() {
        if (securityConfig == null) {
            securityConfig = (SecurityConfig) config.getServletContext().getAttribute(SecurityConfig.STORAGE_KEY);
        }
        return securityConfig;
    }
}
