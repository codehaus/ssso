/*
 * Created on 08.09.2004
 *
 * @author ingomar.otter@valtech.de
 * @author Parts www.atlassian.com
 **/

package com.atlassian.seraph.auth;

import java.security.Principal;

import java.io.IOException;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.atlassian.seraph.auth.AuthenticatorException;
import com.atlassian.seraph.auth.DefaultAuthenticator;
import com.atlassian.seraph.config.SecurityConfig;
import com.atlassian.seraph.interceptor.LogoutInterceptor;
import com.atlassian.seraph.util.CookieUtils;
import com.opensymphony.user.EntityNotFoundException;
import com.opensymphony.user.User;
import com.opensymphony.user.UserManager;

import edu.yale.its.tp.cas.client.filter.CASFilter;

/**
 * @author ingomar.otter
 * @author jayshao
 * 
 */

public class ConfluenceCasAuthenticator extends DefaultAuthenticator {
	private static final Category log = Category
			.getInstance(ConfluenceCasAuthenticator.class);

	protected String _cas_login_url;

	protected String _cas_logout_url;

	public void init(Map params, SecurityConfig config) {
		super.init(params, config);
		_cas_login_url = config.getLoginURL();
		_cas_logout_url = config.getLogoutURL();
	}

	/**
	 * @return com.opensymphony.user.User
	 *
	 */
	public User getUser(HttpServletRequest request, HttpServletResponse response) {

		String us = (String) request.getSession().getAttribute(CASFilter.CAS_FILTER_USER);
		if (us != null) {
			log.debug("CAS user:" + us);

			User user = null;
			
			try {
				user = UserManager.getInstance().getUser(us);
			} catch (EntityNotFoundException e) {
				log.error("Could not find user: " + us);
			}

			if (user != null) {
				// required for compatibility
				request.getSession().setAttribute(LOGGED_IN_KEY, user);
				request.getSession().setAttribute(LOGGED_OUT_KEY, null);

				log.debug("got UserManager user" + user.toString());
				
				return user;
			} else {
				// Something is pretty wrong
				log.error("CAS user is null. Please review your web.xml CASFilter configuration.");
				return null;
			}
		} else {
			return super.getUser(request, response);
		}
	}
	
	public boolean login(HttpServletRequest request, HttpServletResponse response,
		String username, String password) {
		
		boolean loginSuccess = false;
		
		try {
			loginSuccess = login(request, response, username, password, false);
		} catch (AuthenticatorException e) {
			log.error("Problem loggin in: ", e);
			return loginSuccess;
		}
		return loginSuccess;
	}
	
	public boolean login(HttpServletRequest request, HttpServletResponse response, 
		String username, String password, boolean cookie)
    	throws AuthenticatorException {

		String us = (String) request.getSession().getAttribute(CASFilter.CAS_FILTER_USER);
		
		if (us != null) {
			return true;
		} else {
			return super.login(request, response, username, password, cookie);
		}
	}

	public boolean logout(HttpServletRequest request,
			HttpServletResponse response) throws AuthenticatorException {

		List interceptors = config.getInterceptors(LogoutInterceptor.class);

        for (Iterator iterator = interceptors.iterator(); iterator.hasNext();)
        {
            LogoutInterceptor interceptor = (LogoutInterceptor) iterator.next();
            interceptor.beforeLogout(request, response);
        }
		
		// kill local session
		request.getSession().removeAttribute(CASFilter.CAS_FILTER_USER);
		request.getSession().removeAttribute(CASFilter.CAS_FILTER_RECEIPT);

		request.getSession().setAttribute(LOGGED_IN_KEY, null);
		request.getSession().setAttribute(LOGGED_OUT_KEY, Boolean.TRUE);
		
		for (Iterator iterator = interceptors.iterator(); iterator.hasNext();)
        {
            LogoutInterceptor interceptor = (LogoutInterceptor) iterator.next();
            interceptor.afterLogout(request, response);
        }

		// FIXME: Seraph is supposed to call the redirect after  executing this method as long as 
		// seraph-config.xml has an absolute logout.url parameter (includes ://), does
		// not seem to be working however.
		
		return true;

	}

}